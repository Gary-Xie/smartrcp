package smartrcp.db;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import cn.smartinvoke.IServerObject;
import cn.smartinvoke.smartrcp.gui.module.CEventBean;

public class CStatement implements IServerObject{
    private Statement statement;
	public CStatement(Statement statement) {
		this.statement=statement;
	}
	
	public void addBatch(String sql) throws SQLException {
		this.statement.addBatch(sql);
	}

	
	public void cancel() throws SQLException {
		this.statement.cancel();
	}

	
	public void clearBatch() throws SQLException {
		this.statement.clearBatch();
	}

	
	public void clearWarnings() throws SQLException {
		this.statement.clearWarnings();
	}

	
	public void close() throws SQLException {
		this.statement.close();
	}

	
	public void execute(String sql,CEventBean eventBean) throws SQLException {
		  boolean ret=this.statement.execute(sql);
		  eventBean.fireOnetimeEvent(ret);
	}

	
	public void execute(String sql, int autoGeneratedKeys,CEventBean eventBean)
			throws SQLException {
		boolean ret= this.statement.execute(sql, autoGeneratedKeys);
		eventBean.fireOnetimeEvent(ret);
	}

	
	public void execute(String sql, int[] columnIndexes,CEventBean eventBean) throws SQLException {
		boolean ret= this.statement.execute(sql, columnIndexes);
		eventBean.fireOnetimeEvent(ret);
	}

	
	public void execute(String sql, String[] columnNames,CEventBean eventBean)
			throws SQLException {
		boolean ret= this.statement.execute(sql, columnNames);
		eventBean.fireOnetimeEvent(ret);
	}

	
	public void executeBatch(CEventBean eventBean) throws SQLException {
		int[] ret= this.statement.executeBatch();
		eventBean.fireOnetimeEvent(ret);
	}

	
	public void executeQuery(String sql,CEventBean eventBean) throws SQLException {
		CResultSet ret= new CResultSet(this.statement.executeQuery(sql));
		eventBean.fireOnetimeEvent(ret);
	}

	
	public void executeUpdate(String sql,CEventBean eventBean) throws SQLException {
		int ret= this.statement.executeUpdate(sql);
		eventBean.fireOnetimeEvent(ret);
	}

	
	public void executeUpdate(String sql, int autoGeneratedKeys,CEventBean eventBean)
			throws SQLException {
		int ret= this.statement.executeUpdate(sql, autoGeneratedKeys);
		eventBean.fireOnetimeEvent(ret);
	}

	
	public void executeUpdate(String sql, int[] columnIndexes,CEventBean eventBean)
			throws SQLException {
		int ret=this.statement.executeUpdate(sql, columnIndexes);
		eventBean.fireOnetimeEvent(ret);
	}

	
	public void executeUpdate(String sql, String[] columnNames,CEventBean eventBean)
			throws SQLException {
		int ret= this.statement.executeUpdate(sql, columnNames);
		eventBean.fireOnetimeEvent(ret);
	}

	
	public CConnection getConnection() throws SQLException {
		return new CConnection(statement.getConnection());
	}

	
	public int getFetchDirection() throws SQLException {
		return this.statement.getFetchDirection();
	}

	
	public int getFetchSize() throws SQLException {
		return this.statement.getFetchSize();
	}

	
	public CResultSet getGeneratedKeys() throws SQLException {
		return new CResultSet(this.statement.getGeneratedKeys());
	}

	
	public int getMaxFieldSize() throws SQLException {
		return this.statement.getMaxFieldSize();
	}

	
	public int getMaxRows() throws SQLException {
		return this.statement.getMaxRows();
	}

	
	public boolean getMoreResults() throws SQLException {
		return this.statement.getMoreResults();
	}

	
	public boolean getMoreResults(int current) throws SQLException {
		return this.statement.getMoreResults(current);
	}

	
	public int getQueryTimeout() throws SQLException {
		return this.statement.getQueryTimeout();
	}

	
	public CResultSet getResultSet() throws SQLException {
		return new CResultSet(this.statement.getResultSet());
	}

	
	public int getResultSetConcurrency() throws SQLException {
		return this.statement.getResultSetConcurrency();
	}

	
	public int getResultSetHoldability() throws SQLException {
		return this.statement.getResultSetHoldability();
	}

	
	public int getResultSetType() throws SQLException {
		return this.statement.getResultSetType();
	}

	
	public int getUpdateCount() throws SQLException {
		return this.statement.getUpdateCount();
	}

	
	public SQLWarning getWarnings() throws SQLException {
		return this.statement.getWarnings();
	}

	
	public boolean isClosed() throws SQLException {
		return this.statement.isClosed();
	}

	
	public boolean isPoolable() throws SQLException {
		return this.statement.isPoolable();
	}

	
	public void setCursorName(String name) throws SQLException {
		this.statement.setCursorName(name);
	}

	
	public void setEscapeProcessing(boolean enable) throws SQLException {
		this.statement.setEscapeProcessing(enable);
	}

	
	public void setFetchDirection(int direction) throws SQLException {
		this.statement.setFetchDirection(direction);
	}

	
	public void setFetchSize(int rows) throws SQLException {
		this.statement.setFetchSize(rows);
	}

	
	public void setMaxFieldSize(int max) throws SQLException {
		this.statement.setMaxFieldSize(max);
	}

	
	public void setMaxRows(int max) throws SQLException {
		this.statement.setMaxRows(max);
	}

	
	public void setPoolable(boolean poolable) throws SQLException {
		this.statement.setPoolable(poolable);
	}

	
	public void setQueryTimeout(int seconds) throws SQLException {
		this.statement.setQueryTimeout(seconds);
	}

	
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return this.statement.isWrapperFor(iface);
	}

	
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return this.statement.unwrap(iface);
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		
	}

	@Override
	public void dispose() {
		// TODO Auto-generated method stub
		
	}

}
