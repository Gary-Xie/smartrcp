package java.sql
{
 import cn.smartinvoke.RemoteObject;
 import java.sql.Wrapper;

[Bindable]
[RemoteClass(alias="java.sql.Statement")]
 public class Statement extends Wrapper {
  public function Statement(){
	 super();
  }

   public function clearBatch():void{
	 var retObj:Object=this.call("clearBatch",arguments);

   }
   public function clearWarnings():void{
	 var retObj:Object=this.call("clearWarnings",arguments);

   }
   public function cancel():void{
	 var retObj:Object=this.call("cancel",arguments);

   }
   public function setMaxFieldSize(max:int):void{
	 var retObj:Object=this.call("setMaxFieldSize",arguments);

   }
   public function getResultSetConcurrency():int{
	 var retObj:Object=this.call("getResultSetConcurrency",arguments);
	 return Number(retObj);

   }
   public function getQueryTimeout():int{
	 var retObj:Object=this.call("getQueryTimeout",arguments);
	 return Number(retObj);

   }
   public function close():void{
	 var retObj:Object=this.call("close",arguments);

   }
   public function executeBatch():Array{
	 var retObj:Object=this.call("executeBatch",arguments);
	 return retObj as Array;

   }
   public function getFetchDirection():int{
	 var retObj:Object=this.call("getFetchDirection",arguments);
	 return Number(retObj);

   }
   public function getResultSetHoldability():int{
	 var retObj:Object=this.call("getResultSetHoldability",arguments);
	 return Number(retObj);

   }
   public function getGeneratedKeys():ResultSet{
	 var retObj:Object=this.call("getGeneratedKeys",arguments);
	 return retObj as ResultSet;

   }
   public function getMaxFieldSize():int{
	 var retObj:Object=this.call("getMaxFieldSize",arguments);
	 return Number(retObj);

   }
   /* public function getWarnings():SQLWarning{
	 var retObj:Object=this.call("getWarnings",arguments);
	 return retObj as SQLWarning;

   } */
   public function getMaxRows():int{
	 var retObj:Object=this.call("getMaxRows",arguments);
	 return Number(retObj);

   }
   public function getConnection():Connection{
	 var retObj:Object=this.call("getConnection",arguments);
	 return retObj as Connection;

   }
   public function setPoolable(poolable:Boolean):void{
	 var retObj:Object=this.call("setPoolable",arguments);

   }
   public function isClosed():Boolean{
	 var retObj:Object=this.call("isClosed",arguments);
	 return retObj as Boolean;

   }
   public function setEscapeProcessing(enable:Boolean):void{
	 var retObj:Object=this.call("setEscapeProcessing",arguments);

   }
   public function setFetchDirection(direction:int):void{
	 var retObj:Object=this.call("setFetchDirection",arguments);

   }
   public function execute(sql:String):Boolean{
	 var retObj:Object=this.call("execute",arguments);
	 return retObj as Boolean;

   }
   public function execute1(sql:String,autoGeneratedKeys:int):Boolean{
	 var retObj:Object=this.call("execute",arguments);
	 return retObj as Boolean;

   }
  /*  public function execute2(sql:String,columnIndexes[]:int):Boolean{
	 var retObj:Object=this.call("execute",arguments);
	 return retObj as Boolean;

   }
   public function execute3(sql:String,columnNames[]:String):Boolean{
	 var retObj:Object=this.call("execute",arguments);
	 return retObj as Boolean;

   } */
   public function setFetchSize(rows:int):void{
	 var retObj:Object=this.call("setFetchSize",arguments);

   }
   public function getResultSetType():int{
	 var retObj:Object=this.call("getResultSetType",arguments);
	 return Number(retObj);

   }
   public function setQueryTimeout(seconds:int):void{
	 var retObj:Object=this.call("setQueryTimeout",arguments);

   }
   public function getResultSet():ResultSet{
	 var retObj:Object=this.call("getResultSet",arguments);
	 return retObj as ResultSet;

   }
   public function executeQuery(sql:String):ResultSet{
	 var retObj:Object=this.call("executeQuery",arguments);
	 return retObj as ResultSet;

   }
   public function isPoolable():Boolean{
	 var retObj:Object=this.call("isPoolable",arguments);
	 return retObj as Boolean;

   }
   public function addBatch(sql:String):void{
	 var retObj:Object=this.call("addBatch",arguments);

   }
   public function executeUpdate(sql:String):int{
	 var retObj:Object=this.call("executeUpdate",arguments);
	 return Number(retObj);

   }
   public function executeUpdate1(sql:String,autoGeneratedKeys:int):int{
	 var retObj:Object=this.call("executeUpdate",arguments);
	 return Number(retObj);

   }
   /* public function executeUpdate2(sql:String,columnIndexes[]:int):int{
	 var retObj:Object=this.call("executeUpdate",arguments);
	 return Number(retObj);

   }
   public function executeUpdate3(sql:String,columnNames[]:String):int{
	 var retObj:Object=this.call("executeUpdate",arguments);
	 return Number(retObj);

   } */
   public function setMaxRows(max:int):void{
	 var retObj:Object=this.call("setMaxRows",arguments);

   }
   public function getUpdateCount():int{
	 var retObj:Object=this.call("getUpdateCount",arguments);
	 return Number(retObj);

   }
   public function getFetchSize():int{
	 var retObj:Object=this.call("getFetchSize",arguments);
	 return Number(retObj);

   }
   public function getMoreResults():Boolean{
	 var retObj:Object=this.call("getMoreResults",arguments);
	 return retObj as Boolean;

   }
   public function getMoreResults1(current:int):Boolean{
	 var retObj:Object=this.call("getMoreResults",arguments);
	 return retObj as Boolean;

   }
   public function setCursorName(name:String):void{
	 var retObj:Object=this.call("setCursorName",arguments);

   }
 }

}
